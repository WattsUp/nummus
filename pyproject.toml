[build-system]
requires = [
  "setuptools>=64",
  "setuptools-scm>=8",
  "wheel",
  "flask",
  "flask-assets",
  "pytailwindcss",
  "jsmin",
]
build-backend = "setuptools.build_meta"

[project]
name = "nummus"
dynamic = ["version"]
dependencies = [
  "sqlalchemy>=2",
  "gevent",
  "colorama",
  "rapidfuzz",
  "cryptography",
  "flask>=3",
  "flask-assets",
  "flask-login",
  "typing-extensions",
  "pdfplumber",
  "yfinance",
  "pyspellchecker",
  "tqdm",
  "argcomplete",
  "scipy",
  "emoji",
  "werkzeug>=3",
  "prometheus-flask-exporter",
]
description = "A personal financial information aggregator and planning tool"
license = { file = "LICENSE" }
readme = "README.md"
authors = [{ name = "Bradley Davis", email = "me@bradleydavis.tech" }]
classifiers = [
  "Programming Language :: Python :: 3",
  "Operating System :: OS Independent",
  "Development Status :: 2 - Pre-Alpha",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Financial and Insurance Industry",
  "Intended Audience :: End Users/Desktop",
  "Topic :: Office/Business :: Financial",
  "Topic :: Office/Business :: Financial :: Accounting",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.10"

[project.scripts]
nummus = "nummus.main:main"

[project.urls]
Homepage = "https://github.com/WattsUp/nummus"
Repository = "https://github.com/WattsUp/nummus.git"
Issues = "https://github.com/WattsUp/nummus/issues"

[project.optional-dependencies]
encrypt = ["sqlcipher3-binary", "Cipher", "pycryptodome"]
test = [
  "AutoDict",
  "coverage",
  "numpy",
  "time-machine",
  "tomli",
  "numpy-financial",
  "pytailwindcss",
  "jsmin",
]
dev = [
  "nummus[test]",     # Development needs tests too
  "ruff>=0.9.0",
  "codespell>=2.3.0",
  "black",
  "isort",
  "viztracer",
  "pre-commit",
  "djlint>=1.35.2",
  "pyright>=1.1.387",
  "taplo",
]

[tool.black]
target-version = ["py310", "py311", "py312"]
preview = true

[tool.codespell]
skip = "3rd-party,dist,*.pem,*.json"
ignore-words-list = ["assertIn", "initialY"]

[tool.coverage.run]
command_line = "-m tests discover -s tests -t . --locals"
branch = true
source = ["nummus"]
omit = [
  "nummus/__main__.py",         # Not capture by coverage
  "nummus/version.py",          # Auto generated by setuptools-scm
  "nummus/controllers/base.py", # Currently just a type definition
  "nummus/commands/web.py",     # Just a wrapper on web.Server.run() and difficult to mock
]

[tool.coverage.report]
ignore_errors = true
precision = 2
show_missing = true
fail_under = 100
exclude_lines = [
  "pragma: no cover", # Have to re-enable the standard pragma

  # Don't complain about missing debug-only code:
  "def __repr__",
  "if self.debug",

  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",

  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if False:",
  "if __name__ == .__main__.:",

  # Don't complain about the one win32 line
  "if sys.platform == .win32.:",

  # Don't complain about ImportErrors, unit tests mocks them
  "except ImportError",

  # Don't complain about missing typing hints
  "if TYPE_CHECKING:",

  # Don't need to test guard code
  "raise exc.UnboundExecutionError",
]

[tool.djlint]
extension = "jinja"
profile = "jinja"

[tool.isort]
profile = "black"
skip_gitignore = true
float_to_top = true
force_alphabetical_sort_within_sections = true

[tool.pyright]
include = ["nummus", "tests", "tools"]
exclude = ["**/__pycache__"]
venvPath = "."
venv = ".venv"

[tool.ruff]
target-version = "py310"

[tool.ruff.lint]
select = [
  "RUF",   # ruff
  "F",     # pyflakes
  "W",     # pycodestyle warnings
  "E",     # pycodestyle errors
  "I",     # isort
  "N",     # pep8-naming
  "D",     # pydocstyle
  "UP",    # pyupgrade
  "YTT",   # flake8-2020
  "ANN",   # flake8-annotations
  "ASYNC", # flask8-async
  "S",     # flake8-bandit
  "BLE",   # flake8-blind-except
  "FBT",   # flake8-boolean-trap
  "B",     # flake8-bugbear
  "A",     # flake8-builtins
  "COM",   # flake8-commas
  "C4",    # flake8-comprehensions
  "T10",   # flake8-debugger
  "EM",    # flake8-errmsg
  "EXE",   # flake8-executable
  "FA",    # flake8-future-annotations
  "ISC",   # flake8-implicit-str-concat
  "ICN",   # flake8-import-conventions
  "G",     # flake8-logging-format
  "INP",   # flake8-no-pep420
  "PIE",   # flake8-pie
  #"T20",  # flake8-print TODO (WattsUp) Remove prints
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "SIM",  # flake8-simplify
  "TID",  # flake8-tidy-imports
  "TCH",  # flake8-type-checking
  "INT",  # flake8-gettext
  "ARG",  # flake8-unused-argument
  "PTH",  # flake8-use-pathlib
  "TD",   # flake8-todos
  "ERA",  # eradicate
  "PGH",  # pygrep-hooks
  "PL",   # pylint
  "TRY",  # tryceratops
  "FLY",  # flynt
  "PERF", # perflint
]

ignore = [
  "I001",    # mismatch between ruff and isort
  "TD003",   # issue links not required for TODOs
  "PLR0911", # Too many return statements
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments
  "PLR0915", # Too many statements
]

exclude = [
  "migrations",
  "__pycache__",
  "manage.py",
  "settings.py",
  "env",
  ".env",
  "venv",
  ".venv",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*.py" = [
  "D100", # Disable missing docstrings in tests
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  "S608", # Disable possible SQL injection
]
"tools/*.py" = [
  "INP001",  # Outside of a package
  "PLR2004", # Allow magic values
]

[tool.ruff.lint.flake8-annotations]
suppress-dummy-args = true

[tool.ruff.lint.flake8-type-checking]
runtime-evaluated-base-classes = [
  "sqlalchemy.orm.DeclarativeBase",
  "nummus.models.base.Base",
]

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.setuptools]
packages = ["nummus"]

[tool.setuptools.cmdclass]
build_py = "nummus.web_assets.BuildAssets"

[tool.setuptools.package-data]
nummus = ["static/dist/*", "templates/*"]

[tool.setuptools.exclude-package-data]
nummus = ["static/src/*", "static/plugins/*", "static/tailwind.config.js"]

[tool.setuptools_scm]
version_file = "nummus/version.py"
