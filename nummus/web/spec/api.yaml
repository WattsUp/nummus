openapi: 3.0.0
servers:
  - url: https://nummus/api
info:
  description: >-
    This is a server for nummus: A personal financial information aggregator and
    planning tool. Collects and categorizes transactions, manages budgets,
    tracks investments, calculates net worth, and predicts future performance.
  version: 0.1.0
  title: nummus API
  license:
    name: MIT
    url: https://github.com/WattsUp/nummus/blob/master/LICENSE
tags:
  - name: Configuration
    description: nummus configuration settings
  - name: Account
    description: Financial account information
  - name: Transaction
    description: Exchange of cash for an asset (or none)
  - name: Asset
    description: Access to individual assets that have a dynamic worth
  - name: Portfolio
    description: Operations on entire portfolio
  - name: Budget
    description: Allocation of cash flow transactions by categories
  - name: Investment
    description: Tools and metrics involved with investable Assets
  - name: Retirement
    description: Tools and metrics involved with retirement
paths:
  /version:
    get:
      tags:
        - Configuration
      summary: Displays version information.
      description: ""
      operationId: nummus.web.controller_config.get_version
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  api:
                    description: Version of nummus API
                    type: string
                    format: "[major].[minor].[patch]"
                    pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)$
                    example: 0.1.0
                  nummus:
                    description: Version of nummus server
                    type: string
                    format: "[major].[minor].[patch](-tweak)"
                    pattern: ^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)-?([a-zA-Z\d][-a-zA-Z.\d]*)?$
                    example: 10.2.0-rc1-alpha
  /account:
    post:
      tags:
        - Account
      summary: Add a new Account to the portfolio
      description: ""
      operationId: nummus.web.controller_account.create
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Invalid parameter supplied
      requestBody:
        $ref: "#/components/requestBodies/Account"
  /account/{accountUUID}:
    get:
      tags:
        - Account
      summary: Find Account by UUID
      description: Returns a single Account
      operationId: nummus.web.controller_account.get
      parameters:
        - $ref: "#/components/parameters/PathAccountUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Account not found
    put:
      tags:
        - Account
      summary: Update an existing Account
      description: ""
      operationId: nummus.web.controller_account.update
      parameters:
        - $ref: "#/components/parameters/PathAccountUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Account not found
      requestBody:
        $ref: "#/components/requestBodies/Account"
    delete:
      tags:
        - Account
      summary: Delete an Account
      description: Deletes the Account and all associated Transactions
      operationId: nummus.web.controller_account.delete
      parameters:
        - $ref: "#/components/parameters/PathAccountUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Account not found
  # /account/{accountUUID}/value:
  #   get:
  #     tags:
  #       - Account
  #     summary: Get value of Account
  #     description: ""
  #     operationId: nummus.web.controller_account.get_value
  #     parameters:
  #       - $ref: "#/components/parameters/PathAccountUUID"
  #       - $ref: "#/components/parameters/Start"
  #       - $ref: "#/components/parameters/End"
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 value:
  #                   description: Worth of all assets held in this Account
  #                   type: array
  #                   items:
  #                     type: number
  #                     format: double
  #                   example:
  #                     - 10687.2
  #                     - 1480.8
  #                 dates:
  #                   $ref: "#/components/schemas/Dates"
  #       "400":
  #         description: Invalid parameter supplied
  #       "404":
  #         description: Account not found
  # /account/{accountUUID}/transactions:
  #   get:
  #     tags:
  #       - Account
  #       - Transaction
  #     summary: Get Transactions of Account
  #     description: Returns same data as /transactions?account=Account.uuid
  #     operationId: nummus.web.controller_account.get_transactions
  #     parameters:
  #       - $ref: "#/components/parameters/PathAccountUUID"
  #       - $ref: "#/components/parameters/Start"
  #       - $ref: "#/components/parameters/End"
  #       - $ref: "#/components/parameters/SortByAge"
  #       - $ref: "#/components/parameters/Limit"
  #       - $ref: "#/components/parameters/Offset"
  #       - $ref: "#/components/parameters/Search"
  #       - $ref: "#/components/parameters/TransactionCategory"
  #       - $ref: "#/components/parameters/TransactionSubcategory"
  #       - $ref: "#/components/parameters/TransactionTag"
  #       - $ref: "#/components/parameters/TransactionLocked"
  #       - $ref: "#/components/parameters/AssetUUID"
  #       - $ref: "#/components/parameters/AssetCategoryExplicit"
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 transactions:
  #                   type: array
  #                   items:
  #                     $ref: "#/components/schemas/TransactionSplit"
  #                 next_offset:
  #                   description: Offset to use to fetch next page, null
  #                     indicates no more pages available
  #                   type: integer
  #                   nullable: true
  #       "400":
  #         description: Invalid parameter supplied
  #       "404":
  #         description: Asset not found
  /accounts:
    get:
      tags:
        - Account
      summary: Get Accounts of Portfolio
      description: ""
      operationId: nummus.web.controller_account.get_all
      parameters:
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/AccountCategory"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  accounts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Account"
                  count:
                    description: Number of matches to request query
                    type: number
                    format: integer
        "400":
          description: Invalid parameter supplied
  /asset:
    post:
      tags:
        - Asset
      summary: Add a new Asset to the portfolio
      description: ""
      operationId: nummus.web.controller_asset.create
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid parameter supplied
      requestBody:
        $ref: "#/components/requestBodies/Asset"
  /asset/{assetUUID}:
    get:
      tags:
        - Asset
      summary: Find Asset by UUID
      description: Returns a single Asset
      operationId: nummus.web.controller_asset.get
      parameters:
        - $ref: "#/components/parameters/PathAssetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Asset not found
    put:
      tags:
        - Asset
      summary: Update an existing Asset
      description: ""
      operationId: nummus.web.controller_asset.update
      parameters:
        - $ref: "#/components/parameters/PathAssetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Asset not found
      requestBody:
        $ref: "#/components/requestBodies/Asset"
    delete:
      tags:
        - Asset
      summary: Delete an Asset
      description: Deletes the Asset
      operationId: nummus.web.controller_asset.delete
      parameters:
        - $ref: "#/components/parameters/PathAssetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Asset"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Asset not found
  /asset/{assetUUID}/image:
    get:
      tags:
        - Asset
      summary: Get image of asset
      description: Returns image of asset
      operationId: nummus.web.controller_asset.get_image
      parameters:
        - $ref: "#/components/parameters/PathAssetUUID"
      responses:
        "200":
          $ref: "#/components/responses/Image"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Asset or Asset Image not found
    # put:
    #   tags:
    #     - Asset
    #   summary: Upload image of asset
    #   description: ""
    #   operationId: nummus.web.controller_asset.update_image
    #   parameters:
    #     - $ref: "#/components/parameters/PathAssetUUID"
    #   responses:
    #     "200":
    #       description: Successful operation
    #     "400":
    #       description: Invalid parameter supplied
    #     "404":
    #       description: Asset or Asset Image not found
    #   requestBody:
    #     $ref: "#/components/requestBodies/Image"
    # delete:
    #   tags:
    #     - Asset
    #   summary: Delete image of asset
    #   description: Deletes image of asset
    #   operationId: nummus.web.controller_asset.delete_image
    #   parameters:
    #     - $ref: "#/components/parameters/PathAssetUUID"
    #   responses:
    #     "200":
    #       $ref: "#/components/responses/Image"
    #     "400":
    #       description: Invalid parameter supplied
    #     "404":
    #       description: Asset or Asset Image not found
  # /asset/{assetUUID}/value:
  #   get:
  #     tags:
  #       - Asset
  #     summary: Get value of Asset
  #     description: ""
  #     operationId: nummus.web.controller_asset.get_value
  #     parameters:
  #       - $ref: "#/components/parameters/PathAssetUUID"
  #       - $ref: "#/components/parameters/Start"
  #       - $ref: "#/components/parameters/End"
  #     responses:
  #       "200":
  #         description: Successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               properties:
  #                 value:
  #                   description: Value of a single unit on specific days
  #                   type: array
  #                   items:
  #                     type: number
  #                     format: double
  #                   example:
  #                     - 10687.2
  #                     - 1480.8
  #                 dates:
  #                   $ref: "#/components/schemas/Dates"
  #       "400":
  #         description: Invalid parameter supplied
  #       "404":
  #         description: Asset not found
  /assets:
    get:
      tags:
        - Asset
      summary: Get Assets of Portfolio
      description: ""
      operationId: nummus.web.controller_asset.get_all
      parameters:
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/AssetCategory"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  assets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Asset"
                  count:
                    description: Number of matches to request query
                    type: number
                    format: integer
                  next_offset:
                    description: Offset to use to fetch next page, null
                      indicates no more pages available
                    type: integer
                    nullable: true
        "400":
          description: Invalid parameter supplied
  /budget:
    post:
      tags:
        - Budget
      summary: Add a new Budget to the portfolio
      description: ""
      operationId: nummus.web.controller_budget.create
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          description: Invalid parameter supplied
      requestBody:
        $ref: "#/components/requestBodies/Budget"
  /budget/{budgetUUID}:
    get:
      tags:
        - Budget
      summary: Find Budget by UUID
      description: Returns a single Budget
      operationId: nummus.web.controller_budget.get
      parameters:
        - $ref: "#/components/parameters/PathBudgetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Budget not found
    put:
      tags:
        - Budget
      summary: Update an existing Budget
      description: ""
      operationId: nummus.web.controller_budget.update
      parameters:
        - $ref: "#/components/parameters/PathBudgetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Budget not found
      requestBody:
        $ref: "#/components/requestBodies/Budget"
    delete:
      tags:
        - Budget
      summary: Delete an Budget
      description: Deletes the Budget
      operationId: nummus.web.controller_budget.delete
      parameters:
        - $ref: "#/components/parameters/PathBudgetUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Budget"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Budget not found
  /budgets:
    get:
      tags:
        - Budget
      summary: Get Budgets of Portfolio
      description: ""
      operationId: nummus.web.controller_budget.get_all
      parameters:
        - $ref: "#/components/parameters/Start"
        - $ref: "#/components/parameters/End"
        - $ref: "#/components/parameters/SortByAge"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  budgets:
                    type: array
                    items:
                      $ref: "#/components/schemas/Budget"
                  count:
                    description: Number of matches to request query
                    type: number
                    format: integer
                  next_offset:
                    description: Offset to use to fetch next page, null
                      indicates no more pages available
                    type: integer
                    nullable: true
        "400":
          description: Invalid parameter supplied
  /transaction:
    post:
      tags:
        - Transaction
      summary: Add a new Transaction to the portfolio
      description: ""
      operationId: nummus.web.controller_transaction.create
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid parameter supplied
      requestBody:
        $ref: "#/components/requestBodies/Transaction"
  /transaction/{transactionUUID}:
    get:
      tags:
        - Transaction
      summary: Find Transaction by UUID
      description: Returns a single Transaction
      operationId: nummus.web.controller_transaction.get
      parameters:
        - $ref: "#/components/parameters/PathTransactionUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Transaction not found
    put:
      tags:
        - Transaction
      summary: Update an existing Transaction
      description: ""
      operationId: nummus.web.controller_transaction.update
      parameters:
        - $ref: "#/components/parameters/PathTransactionUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Transaction not found
      requestBody:
        $ref: "#/components/requestBodies/Transaction"
    delete:
      tags:
        - Transaction
      summary: Delete an Transaction
      description: Deletes the Transaction
      operationId: nummus.web.controller_transaction.delete
      parameters:
        - $ref: "#/components/parameters/PathTransactionUUID"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          description: Invalid parameter supplied
        "404":
          description: Transaction not found
  /transactions:
    get:
      tags:
        - Transaction
      summary: Get Transactions of Portfolio
      description: Returns TransactionSplits matching criteria
      operationId: nummus.web.controller_transaction.get_all
      parameters:
        - $ref: "#/components/parameters/Start"
        - $ref: "#/components/parameters/End"
        - $ref: "#/components/parameters/SortByAge"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Search"
        - $ref: "#/components/parameters/TransactionCategory"
        - $ref: "#/components/parameters/TransactionSubcategory"
        - $ref: "#/components/parameters/TransactionTag"
        - $ref: "#/components/parameters/TransactionLocked"
        - $ref: "#/components/parameters/AccountUUID"
        - $ref: "#/components/parameters/AccountCategoryExplicit"
        - $ref: "#/components/parameters/AssetUUID"
        - $ref: "#/components/parameters/AssetCategoryExplicit"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions:
                    type: array
                    items:
                      $ref: "#/components/schemas/TransactionSplit"
                  next_offset:
                    description: Offset to use to fetch next page, null
                      indicates no more pages available
                    type: integer
                    nullable: true
        "400":
          description: Invalid parameter supplied
        "404":
          description: Account or Asset not found
externalDocs:
  description: Find out more about nummus
  url: https://github.com/WattsUp/nummus
components:
  requestBodies:
    Account:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Account"
      description: Account object that needs to be added to the portfolio
      required: true
    Asset:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Asset"
      description: Asset object that needs to be added to the portfolio
      required: true
    Budget:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Budget"
      description: Budget object that needs to be added to the portfolio
      required: true
    Transaction:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Transaction"
      description: Transaction object that needs to be added to the portfolio
      required: true
    Image:
      description: Image that needs to be added to the portfolio
      content:
        image/*:
          schema:
            $ref: "#/components/schemas/Image"
      required: true
  responses:
    Image:
      description: Image content
      content:
        image/*:
          schema:
            $ref: "#/components/schemas/Image"
    HTML:
      description: HTML content
      content:
        text/html:
          example: <html><body>Your HTML text</body></html>
  parameters:
    PathAccountUUID:
      name: accountUUID
      in: path
      description: ID of Account to operate on
      required: true
      schema:
        type: string
        format: uuid
    PathAssetUUID:
      name: assetUUID
      in: path
      description: ID of Asset to operate on
      required: true
      schema:
        type: string
        format: uuid
    PathBudgetUUID:
      name: budgetUUID
      in: path
      description: ID of Budget to operate on
      required: true
      schema:
        type: string
        format: uuid
    PathTransactionUUID:
      name: transactionUUID
      in: path
      description: ID of Transaction to operate on
      required: true
      schema:
        type: string
        format: uuid
    Start:
      name: start
      in: query
      description: Filter data equal to or after this date
      schema:
        type: string
        format: date
    End:
      name: end
      in: query
      description: Filter data equal to or before this date, default is today
      schema:
        type: string
        format: date
    SortByAge:
      name: sort
      in: query
      description: Sort data by criteria
      schema:
        type: string
        default: oldest
        enum:
          - oldest
          - newest
    SortByValue:
      name: sort
      in: query
      description: >-
        Sort data by value, largest to smallest either by the latest or average
        value
      schema:
        type: string
        default: latest
        enum:
          - latest
          - average
    Limit:
      name: limit
      in: query
      description: Maximum number of elements to return
      schema:
        type: integer
        minimum: 1
        maximum: 500
        default: 50
    Offset:
      name: offset
      in: query
      description: Pagination offset to continue from
      schema:
        type: integer
        default: 0
    AccountCategory:
      name: category
      in: query
      description: Filter data by Account category
      schema:
        $ref: "#/components/schemas/Account/properties/category"
    AccountCategoryExplicit:
      name: account_category
      in: query
      description: Filter data by Account category
      schema:
        $ref: "#/components/schemas/Account/properties/category"
    AccountUUID:
      name: account
      in: query
      description: Filter data by Account UUID
      schema:
        $ref: "#/components/schemas/Account/properties/uuid"
    AssetCategory:
      name: category
      in: query
      description: Filter data by Asset category
      schema:
        $ref: "#/components/schemas/Asset/properties/category"
    AssetCategoryExplicit:
      name: asset_category
      in: query
      description: Filter data by Asset category
      schema:
        $ref: "#/components/schemas/Asset/properties/category"
    AssetUUID:
      name: asset
      in: query
      description: Filter data by Asset UUID
      schema:
        $ref: "#/components/schemas/Asset/properties/uuid"
    TransactionCategory:
      name: category
      in: query
      description: Filter data by Transaction category
      schema:
        $ref: "#/components/schemas/TransactionSplit/properties/category"
    TransactionSubcategory:
      name: subcategory
      in: query
      description: Filter data by Transaction subcategory
      schema:
        $ref: "#/components/schemas/TransactionSplit/properties/subcategory"
    TransactionTag:
      name: tag
      in: query
      description: Filter data by Transaction tag
      schema:
        $ref: "#/components/schemas/TransactionSplit/properties/tag"
    TransactionLocked:
      name: locked
      in: query
      description: Filter data by Transaction locked state
      schema:
        $ref: "#/components/schemas/Transaction/properties/locked"
    Search:
      name: search
      in: query
      description: >-
        After applying all other filters, perform a fuzzy search on data and
        discard poor matches. If sort is not provided, results are returned
        sorted by best match.
      schema:
        type: string
  schemas:
    Account:
      description: An financial Account of the portfolio
      type: object
      required:
        - uuid
        - name
        - institution
        - category
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          example: Monkey Bank Checking
        institution:
          type: string
          example: Monkey Bank
        category:
          type: string
          enum:
            - cash
            - credit
            - investment
            - mortgage
            - loan
            - fixed
            - other
        opened_on:
          description: Date of first transaction
          type: string
          format: date
          readOnly: true
        updated_on:
          description: Date of latest transaction
          type: string
          format: date
          readOnly: true
    Asset:
      description: Individual item with dynamic worth
      type: object
      required:
        - uuid
        - name
        - category
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        name:
          description: Name of asset
          type: string
          example: NASDAQ:AMZN
        description:
          type: string
          example: Amazon.com, Inc.
          nullable: true
        category:
          type: string
          enum:
            - cash
            - security
            - real_estate
            - vehicle
            - item
        unit:
          description: Unit name for a individual asset
          type: string
          example: shares
          nullable: true
        tag:
          type: string
          example: Collectibles
          nullable: true
    Budget:
      description: >-
        Allocation of cash flow transactions by categories. All numbers are
        annual allocations.
      type: object
      required:
        - uuid
        - date
        - categories
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        date:
          description: Effective date of budget
          type: string
          format: date
        total:
          description: Total limit of budget
          type: number
          format: double
          readOnly: true
        categories:
          description: Category breakdown of budget
          type: object
          properties:
            home:
              type: number
              format: double
            food:
              type: number
              format: double
            shopping:
              type: number
              format: double
            hobbies:
              type: number
              format: double
            services:
              type: number
              format: double
            travel:
              type: number
              format: double
          required:
            - home
            - food
            - shopping
            - hobbies
            - services
            - travel
    Transaction:
      description: Exchange of cash for an asset (or none)
      type: object
      required:
        - uuid
        - account_uuid
        - date
        - total
        - statement
        - locked
        - splits
        - is_split
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        account_uuid:
          description: ID of Account that owns this Transaction
          type: string
          format: uuid
        date:
          type: string
          format: date
        total:
          description: >-
            Total amount of cash exchanged. Positive indicates Account increases
            in value (inflow).
          type: number
          format: double
          example: -10.99
        statement:
          description: Text appearing on statement
          type: string
          example: AMZN#123456789
        locked:
          description: Parameters can only be manually edited
          type: boolean
        splits:
          description: Parent transaction when split
          type: array
          items:
            $ref: "#/components/schemas/TransactionSplit"
        is_split:
          description: True if there are more than one TransactionSplit
          type: boolean
          readOnly: true
    TransactionSplit:
      description: Exchange of cash for an asset (or none)
      type: object
      required:
        - uuid
        - total
        - parent_uuid
        - account_uuid
        - date
        - locked
        - is_split
      properties:
        uuid:
          type: string
          format: uuid
          readOnly: true
        parent_uuid:
          description: ID of Transaction that owns this TransactionSplit
          type: string
          format: uuid
          readOnly: true
        account_uuid:
          description: ID of Account that owns this Transaction
          type: string
          format: uuid
          readOnly: true
        date:
          type: string
          format: date
          readOnly: true
        total:
          description: >-
            Total amount of cash exchanged. Positive indicates Account increases
            in value (inflow).
          type: number
          format: double
          example: -10.99
        sales_tax:
          description: Amount of sales tax paid on transaction, always negative
          type: number
          format: double
          example: -0.52
          nullable: true
        payee:
          description: Name of payee (for outflow)/payer (for inflow)
          type: string
          example: Amazon
          nullable: true
        description:
          type: string
          example: Banana hook
          nullable: true
        category:
          type: string
          enum:
            - home
            - food
            - shopping
            - hobbies
            - services
            - travel
            - income
            - instrument
            - transfer
          nullable: true
        subcategory:
          type: string
          example: Furnishings
          nullable: true
        tag:
          type: string
          example: Kitchen
          nullable: true
        asset_uuid:
          description: >-
            ID of Asset exchanged for cash, primarily for instrument
            transactions
          type: string
          format: uuid
          nullable: true
        asset_quantity:
          description: >-
            Number of units of Asset exchanged. Positive indicates Account
            gained Assets (inflow)
          type: number
          format: double
          example: -0.52
          nullable: true
        locked:
          description: Parameters can only be manually edited
          type: boolean
          readOnly: true
        is_split:
          description: True if part of a split Transaction
          type: boolean
          readOnly: true
    Dates:
      description: Dates when valuations occur
      type: array
      items:
        type: string
        format: date
      example:
        - "2020-10-01"
        - "2020-10-02"
    Image:
      description: base64 encoded image
      type: string
      format: binary
      example: \x89PNG\r\n\x1a\n...
    DoubleList:
      description: List of floating point values
      type: array
      items:
        type: number
        format: double
      example:
        - 50
        - 20
    DoubleListBudgeted:
      description: >-
        List of floating point values per Budget category. Keys might be sorted
        depending on use
      type: object
      required:
        - home
        - food
        - shopping
        - hobbies
        - services
        - travel
      properties:
        home:
          $ref: "#/components/schemas/DoubleList"
        food:
          $ref: "#/components/schemas/DoubleList"
        shopping:
          $ref: "#/components/schemas/DoubleList"
        hobbies:
          $ref: "#/components/schemas/DoubleList"
        services:
          $ref: "#/components/schemas/DoubleList"
        travel:
          $ref: "#/components/schemas/DoubleList"
